type Query {
    users(query: String): [User!]!
    cities(query: String): [City!]!
    votes: [Vote!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    loginUser(data: LoginUserInput!): AuthPayload!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    createCity(data: CreateCityInput!): City!
    deleteCity(id: ID!): City!
    updateCity(id: ID!, data: UpdateCityInput!): City!
    createVote(data: CreateVoteInput!): Vote!
    deleteVote(id: ID!): Vote!
    updateVote(id: ID!, data: UpdateVoteInput!): Vote!
}

type Subscription {
    vote(cityId: ID!): VoteSubscriptionPayload!
    city: CitySubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}
input LoginUserInput {
    email: String!
    password: String!
}
input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreateCityInput {
    name: String!
    available: Boolean!
    major: ID!
}

input UpdateCityInput {
    name: String!
    available: Boolean
}

input CreateVoteInput {
    author: ID!
    city: ID!
}

input UpdateVoteInput {
    city: ID!
}

type User {
    id: ID!
    name: String!
    email: String!
    cities: [City!]!
    votes: [Vote!]!
}

type City {
    id: ID!
    name: String!
    available: Boolean!
    major: User!
    votes: [Vote!]!
}

type Vote {
    id: ID!
    author: User!
    city: City!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type CitySubscriptionPayload {
    mutation: MutationType!
    node: City
}

type VoteSubscriptionPayload {
    mutation: MutationType!
    node: Vote
}