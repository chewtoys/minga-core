type Query {
    users(filter: String): [User!]!
    cities(filter: String): [City!]!
}
type Subscription {
    city: CitySubscriptionPayload!
}
type Mutation {
    createUser(data: CreateUserInput!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    deleteUser(id: ID!): User! 

    createCity(data: CreateCityInput!): City!
    updateCity(id: ID!, data: UpdateCityInput!): City!
    deleteCity(id: ID!): City! 
}
input CreateUserInput {
    name: String!
    email: String!
} 
input UpdateUserInput {
    name: String
    email: String
} 
input CreateCityInput {
    name: String!
    votes: ID!
} 
input UpdateCityInput {
    name: String!
    votes: ID!
} 

type User {
    id: ID!
    name: String!
    email: String!
}
type City {
    id: ID!
    name: String!
}

type CitySubscriptionPayload {
    mutation: MutationType!
    data: City!
}
enum MutationType {
    CREATED
    UPDATED
    DELETED
}